// Switching to the new database
use ecommerceDB;

// Creating new collections
db.createCollection("users");
db.createCollection("orders");
db.createCollection("products");
db.createCollection("warehouses");

// Inserting data to the users collection
db.users.insertMany([
  {
    userId: "U001",
    name: "Arjun Sharma",
    email: "arjun.sharma@example.com",
    age: 29,
    address: {
      city: "Delhi",
      state: "Delhi",
      zip: "110001"
    },
    createdAt: new ISODate("2024-01-01T10:00:00Z")
  },
  {
    userId: "U002",
    name: "Priya Mehta",
    email: "priya.mehta@example.com",
    age: 30,
    address: {
      city: "Mumbai",
      state: "Maharashtra",
      zip: "400001"
    },
    createdAt: new ISODate("2024-02-01T12:00:00Z")
  },
  {
    userId: "U003",
    name: "Rajesh Gupta",
    email: "rajesh.gupta@example.com",
    age: 26,
    address: {
      city: "Bengaluru",
      state: "Karnataka",
      zip: "560001"
    },
    createdAt: new ISODate("2024-03-15T09:30:00Z")
  }
]);



// Inserting data to the orders collection
db.orders.insertMany([
  {
    orderId: "ORD001",
    userId: "U001",
    orderDate: new ISODate("2024-12-10T14:32:00Z"),
    items: [
      { productId: "P001", quantity: 2, price: 1500 },
      { productId: "P002", quantity: 1, price: 2000 }
    ],
    totalAmount: 5000,
    status: "Delivered"
  },
  {
    orderId: "ORD002",
    userId: "U002",
    orderDate: new ISODate("2024-12-05T16:20:00Z"),
    items: [
      { productId: "P001", quantity: 1, price: 1500 },
      { productId: "P003", quantity: 2, price: 10000 }
    ],
    totalAmount: 21500,
    status: "Delivered"
  },
  {
    orderId: "ORD003",
    userId: "U003",
    orderDate: new ISODate("2024-12-20T10:15:00Z"),
    items: [
      { productId: "P002", quantity: 2, price: 4000 },
      { productId: "P003", quantity: 1, price: 5000 }
    ],
    totalAmount: 13000,
    status: "Shipped"
  }
]);




// Inserting data to the products collection
db.products.insertMany([
  {
    productId: "P001",
    name: "Smartphone",
    category: "Electronics",
    price: 1500,
    stock: 300,
    ratings: [
      { userId: "U002", rating: 4.7 },
      { userId: "U003", rating: 4.2 }
    ]
  },
  {
    productId: "P002",
    name: "Wireless Earbuds",
    category: "Accessories",
    price: 2000,
    stock: 200,
    ratings: [
      { userId: "U001", rating: 4.5 },
      { userId: "U003", rating: 4.8 }
    ]
  },
  {
    productId: "P003",
    name: "Laptop",
    category: "Computers",
    price: 50000,
    stock: 50,
    ratings: [
      { userId: "U002", rating: 5.0 },
      { userId: "U001", rating: 4.9 }
    ]
  }
]);




// Create Index for Geospatial Queries
db.warehouses.createIndex({ location: "2dsphere" });

// Queries

// 1. Find High-Spending Users
db.users.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "userId",
      foreignField: "userId",
      as: "userOrders"
    }
  },
  {
    $unwind: "$userOrders"
  },
  {
    $group: {
      _id: "$userId",
      name: { $first: "$name" },
      totalSpent: { $sum: "$userOrders.totalAmount" }
    }
  },
  {
    $match: {
      totalSpent: { $gt: 10000 }
    }
  },
  {
    $project: {
      _id: 0,
      userId: "$_id",
      name: 1,
      totalSpent: 1
    }
  }
]);



// 2. List Popular Products by Average Rating
db.products.aggregate([
  {
    $unwind: "$ratings"
  },
  {
    $group: {
      _id: "$productId",
      name: { $first: "$name" },
      avgRating: { $avg: "$ratings.rating" }
    }
  },
  {
    $match: {
      avgRating: { $gte: 4 }
    }
  },
  {
    $project: {
      _id: 0,
      productId: "$_id",
      name: 1,
      avgRating: 1
    }
  }
]);



// 3. Search for Orders in a Specific Time Range
db.orders.aggregate([
  {
    $match: {
      orderDate: {
        $gte: new ISODate("2024-12-01T00:00:00Z"),
        $lte: new ISODate("2024-12-31T23:59:59Z")
      }
    }
  },
  {
    $lookup: {
      from: "users",
      localField: "userId",
      foreignField: "userId",
      as: "userDetails"
    }
  },
  {
    $unwind: "$userDetails"
  },
  {
    $project: {
      _id: 0,
      orderId: 1,
      userName: "$userDetails.name",
      orderDate: 1,
      totalAmount: 1,
      status: 1
    }
  }
]);



// 4. Update Stock After Order Completion
db.orders.find({ orderId: "ORD001" }).forEach(order => {
  order.items.forEach(item => {
    db.products.updateOne(
      { productId: item.productId },
      { $inc: { stock: -item.quantity } }
    );
  });
});




// 5. Find Nearest Warehouse
db.warehouses.aggregate([
  {
    $geoNear: {
      near: { type: "Point", coordinates: [77.1025, 28.7041] }, // Delhi coordinates
      distanceField: "distance",
      maxDistance: 50000, // 50 kilometers in meters
      spherical: true,
      query: { products: "P001" }
    }
  },
  {
    $project: {
      _id: 0,
      warehouseId: 1,
      distance: 1,
      location: 1
    }
  }
]);
